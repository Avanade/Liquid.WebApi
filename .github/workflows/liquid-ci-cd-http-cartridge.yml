# CI & CD workflow
name: CI/CD - WebApi.Http Cartridge for Liquid Application Framework

on:
  push:
    branches: [ main ]
    paths:
    - 'src/Liquid.WebApi.Http/**'
    
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths:
    - 'src/Liquid.WebApi.Http/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Job Type
      run: |
        if [$GITHUB_EVENT_NAME == 'push']
        then
          echo "Starting CD Job: Build, Test, Analyze, Pack and Publish library to Nuget.org..."
        else
          echo "Starting CI Job: Build, Test and Analyze..."
        fi
    
    - name: (CI) Checkout repo on Pull Request
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
        fetch-depth: 0 # required to eliminate shallow clone warning in Sonarcloud analysis
        
    - name: (CI/CD) Checkout repo
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # required to eliminate shallow clone warning in Sonarcloud analysis

    # required by sonarcloud scanner
    - name: (CI/CD) Setup Java JDK
      uses: actions/setup-java@v1.4.3
      with:
        # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x). Early access versions can be specified in the form of e.g. 14-ea, 14.0.0-ea, or 14.0.0-ea.28
        java-version: 11.x
        
    - name: (CI/CD) Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        # SDK version to use. Examples: 2.2.104, 3.1, 3.1.x
        dotnet-version: 3.1.x

    # required by sonarcloud scanner
    - name: (CI/CD) Setup Sonar Scanner tool
      run: dotnet tool install --global dotnet-sonarscanner

    - name: (CI/CD) Install Test Reporting Tool
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: (CI/CD) Restore dependencies
      run: dotnet restore src/Liquid.WebApi.Http/Liquid.WebApi.Http.csproj

    - name: (CI/CD) Build and Analyze Project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_HTTP }}
      run: |
        dotnet sonarscanner begin /k:"Avanade_Liquid.WebApi.Http" /o:"avanade-1" /d:sonar.login="${{secrets.SONAR_TOKEN_HTTP}}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths=$GITHUB_WORKSPACE/testresults/*.trx /d:sonar.coverageReportPaths=$GITHUB_WORKSPACE/coverlet/reports/SonarQube.xml
        dotnet build src/Liquid.WebApi.Http/Liquid.WebApi.Http.csproj --configuration Release --no-restore
        dotnet test test/Liquid.WebApi.Http.Tests/*Tests.csproj --collect:"XPlat Code Coverage" --logger trx --results-directory $GITHUB_WORKSPACE/testresults
        reportgenerator -reports:$GITHUB_WORKSPACE/testresults/**/coverage.cobertura.xml -targetdir:$GITHUB_WORKSPACE/coverlet/reports -reporttypes:"SonarQube"
        dotnet sonarscanner end /d:sonar.login="${{secrets.SONAR_TOKEN_HTTP}}"

    - name: (CD) Nuget Pack & Push to Nuget.org
      if: ${{ github.event_name == 'push' }}
      run: |
        dotnet pack --no-build --configuration Release src/Liquid.WebApi.Http/Liquid.WebApi.Http.csproj --output .
        dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.PUBLISH_TO_NUGET_ORG}} --skip-duplicate
      
